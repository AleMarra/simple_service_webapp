
package wtp;

import java.net.MalformedURLException;
import java.net.URL;
import javax.xml.namespace.QName;
import javax.xml.ws.Service;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceException;
import javax.xml.ws.WebServiceFeature;


/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.2.4-b01
 * Generated source version: 2.2
 * 
 */
@WebServiceClient(name = "LoginAPIHelper", targetNamespace = "http://wtp", wsdlLocation = "file:./src/main/java/com/fiuba/taller/mock/LoginAPIHelper.wsdl")
public class LoginAPIHelper
    extends Service
{

    private final static URL LOGINAPIHELPER_WSDL_LOCATION;
    private final static WebServiceException LOGINAPIHELPER_EXCEPTION;
    private final static QName LOGINAPIHELPER_QNAME = new QName("http://wtp", "LoginAPIHelper");

    static {
        URL url = null;
        WebServiceException e = null;
        try {
            url = new URL("file:/home/alemarra/workspace/facultad/tallerII/simple-service-webapp/src/main/java/com/fiuba/taller/mock/LoginAPIHelper.wsdl");
        } catch (MalformedURLException ex) {
            e = new WebServiceException(ex);
        }
        LOGINAPIHELPER_WSDL_LOCATION = url;
        LOGINAPIHELPER_EXCEPTION = e;
    }

    public LoginAPIHelper() {
        super(__getWsdlLocation(), LOGINAPIHELPER_QNAME);
    }

    public LoginAPIHelper(WebServiceFeature... features) {
        super(__getWsdlLocation(), LOGINAPIHELPER_QNAME, features);
    }

    public LoginAPIHelper(URL wsdlLocation) {
        super(wsdlLocation, LOGINAPIHELPER_QNAME);
    }

    public LoginAPIHelper(URL wsdlLocation, WebServiceFeature... features) {
        super(wsdlLocation, LOGINAPIHELPER_QNAME, features);
    }

    public LoginAPIHelper(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public LoginAPIHelper(URL wsdlLocation, QName serviceName, WebServiceFeature... features) {
        super(wsdlLocation, serviceName, features);
    }

    /**
     * 
     * @return
     *     returns LoginAPIHelperPortType
     */
    @WebEndpoint(name = "LoginAPIHelperHttpSoap11Endpoint")
    public LoginAPIHelperPortType getLoginAPIHelperHttpSoap11Endpoint() {
        return super.getPort(new QName("http://wtp", "LoginAPIHelperHttpSoap11Endpoint"), LoginAPIHelperPortType.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns LoginAPIHelperPortType
     */
    @WebEndpoint(name = "LoginAPIHelperHttpSoap11Endpoint")
    public LoginAPIHelperPortType getLoginAPIHelperHttpSoap11Endpoint(WebServiceFeature... features) {
        return super.getPort(new QName("http://wtp", "LoginAPIHelperHttpSoap11Endpoint"), LoginAPIHelperPortType.class, features);
    }

    /**
     * 
     * @return
     *     returns LoginAPIHelperPortType
     */
    @WebEndpoint(name = "LoginAPIHelperHttpSoap12Endpoint")
    public LoginAPIHelperPortType getLoginAPIHelperHttpSoap12Endpoint() {
        return super.getPort(new QName("http://wtp", "LoginAPIHelperHttpSoap12Endpoint"), LoginAPIHelperPortType.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns LoginAPIHelperPortType
     */
    @WebEndpoint(name = "LoginAPIHelperHttpSoap12Endpoint")
    public LoginAPIHelperPortType getLoginAPIHelperHttpSoap12Endpoint(WebServiceFeature... features) {
        return super.getPort(new QName("http://wtp", "LoginAPIHelperHttpSoap12Endpoint"), LoginAPIHelperPortType.class, features);
    }

    /**
     * 
     * @return
     *     returns LoginAPIHelperPortType
     */
    @WebEndpoint(name = "LoginAPIHelperHttpEndpoint")
    public LoginAPIHelperPortType getLoginAPIHelperHttpEndpoint() {
        return super.getPort(new QName("http://wtp", "LoginAPIHelperHttpEndpoint"), LoginAPIHelperPortType.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns LoginAPIHelperPortType
     */
    @WebEndpoint(name = "LoginAPIHelperHttpEndpoint")
    public LoginAPIHelperPortType getLoginAPIHelperHttpEndpoint(WebServiceFeature... features) {
        return super.getPort(new QName("http://wtp", "LoginAPIHelperHttpEndpoint"), LoginAPIHelperPortType.class, features);
    }

    private static URL __getWsdlLocation() {
        if (LOGINAPIHELPER_EXCEPTION!= null) {
            throw LOGINAPIHELPER_EXCEPTION;
        }
        return LOGINAPIHELPER_WSDL_LOCATION;
    }

}
